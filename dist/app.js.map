{"version":3,"file":"app.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAJA;AAUA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAJA;AAWA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAPA;AAaA;AACA;AACA;;AAEA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AAEA;AACA;AADA;AAFA;AAMA;AACA;AACA;AACA;AADA;AADA;AADA;AAPA;AAeA;AACA;AACA;;AACA;AACA;;;;;;;;;;;;;;;;;AC/BA;AACA;AAEA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;;AACA;AACA;;;;;;;;;;;;;;;;;;ACnBA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AADA;AADA;AADA;AAPA;AAiBA;AACA;AACA;AACA;AADA;AADA;AADA;AAlBA;AA0BA;AACA;AACA;;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AADA;AADA;AAJA;AAYA;AACA;AACA;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACpEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AAAA;AAAA;AAFA;AAFA;AAJA;AAaA;AACA;AAEA;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AAEA;AAEA;AACA;;AAGA;AACA;AACA;AADA;AAKA;AACA;AACA;;AACA;AACA;;;;;;;;;;;;;;;;;ACpBA;AACA;AAEA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;ACnBA;AACA;AAEA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AADA;AADA;AADA;AADA;AAcA;AACA;AACA;;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AADA;AADA;AADA;AAJA;AAiBA;AACA;AACA;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AAEA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AADA;AAGA;AAJA;AASA;AACA;AACA;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAHA;AAOA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AADA;AADA;AANA;AARA;AAsBA;AACA;AACA;;AACA;AACA;;;;;;;;;;;;;;;;;ACxCA;AACA;AAEA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AADA;AADA;AADA;AAJA;AAcA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AADA;AADA;AANA;AAlBA;AA+BA;AACA;AACA;;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AADA;AADA;AANA;AAJA;AAiBA;AACA;AACA;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC9EA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAFA;AAPA;AAJA;AAkBA;AACA;AACA;;AACA;AACA;;;;;;;;;;;;;;;;ACnCA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAGA;;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAIA;;;;;;;;;;;;;;;ACpBA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;;;;;;;;;;;;;;;ACAA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAPA;AASA;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC7BA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AADA;AADA;AAKA;AAEA;AACA;AAGA;AAEA;AAEA;AAGA;AACA;AACA;AADA;AAIA;AAEA;AACA;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;ACZA;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACJA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;;AAMA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;ACbA;AACA;AAEA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;ACTA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;AC9BA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;;AACA;AACA;;;;;;;;;;;;;;ACbA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;ACZA;AACA;AAEA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;;;;;;;;;;;;;;;ACbA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;;AACA;AACA;;;;;;;;;;ACdA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA","sources":["webpack://alquimiaspring/./src/controller/auth/LoginUser.js","webpack://alquimiaspring/./src/controller/auth/RegisterUser.js","webpack://alquimiaspring/./src/controller/characters/CreateCharacters.js","webpack://alquimiaspring/./src/controller/characters/DeleteCharacters.js","webpack://alquimiaspring/./src/controller/characters/GetCharacters.js","webpack://alquimiaspring/./src/controller/characters/UpdateCharacters.js","webpack://alquimiaspring/./src/controller/genres/CreateGenres.js","webpack://alquimiaspring/./src/controller/genres/DeleteGenres.js","webpack://alquimiaspring/./src/controller/genres/GetGenres.js","webpack://alquimiaspring/./src/controller/genres/UpdateGenres.js","webpack://alquimiaspring/./src/controller/movies/CreateMovies.js","webpack://alquimiaspring/./src/controller/movies/DeleteMovies.js","webpack://alquimiaspring/./src/controller/movies/GetMovies.js","webpack://alquimiaspring/./src/controller/movies/UpdateMovies.js","webpack://alquimiaspring/./src/models/personaje_en_pelicula.ts","webpack://alquimiaspring/./src/routes/AuthRoutes.js","webpack://alquimiaspring/./src/routes/CharactersRoutes.js","webpack://alquimiaspring/./src/routes/GenresRoutes.js","webpack://alquimiaspring/./src/routes/MoviesRoutes.js","webpack://alquimiaspring/./src/routes/Router.js","webpack://alquimiaspring/./src/utils/errors/PrismaErrorHandler.js","webpack://alquimiaspring/./src/utils/errors/ResponseError.js","webpack://alquimiaspring/./src/utils/errors/RunTimeErrorHandler.js","webpack://alquimiaspring/./src/utils/errors/TypeErrors.js","webpack://alquimiaspring/./src/utils/errors/codeErrors.js","webpack://alquimiaspring/./src/utils/helpers/auth/AuthFunctions.js","webpack://alquimiaspring/./src/utils/helpers/common/ConnectSchema.js","webpack://alquimiaspring/./src/utils/helpers/common/DateConverter.js","webpack://alquimiaspring/./src/utils/helpers/common/FilterConstants.js","webpack://alquimiaspring/./src/utils/helpers/common/ImageSetter.js","webpack://alquimiaspring/./src/utils/helpers/common/StringFormater.js","webpack://alquimiaspring/./src/utils/validations/auth/AuthFieldChecker.js","webpack://alquimiaspring/./src/utils/validations/auth/MiddleAuthValidator.js","webpack://alquimiaspring/./src/utils/validations/characters/MiddleCharactersValidator.js","webpack://alquimiaspring/./src/utils/validations/common/Dates.js","webpack://alquimiaspring/./src/utils/validations/common/ReqBodyEmpty.js","webpack://alquimiaspring/./src/utils/validations/common/Validations.js","webpack://alquimiaspring/./src/utils/validations/genres/MiddleGenresValidator.js","webpack://alquimiaspring/./src/utils/validations/movies/MiddleMoviesValidator.js","webpack://alquimiaspring/./src/utils/validations/movies/MoviesFieldChecker.js","webpack://alquimiaspring/external commonjs \"@prisma/client\"","webpack://alquimiaspring/external commonjs \"consolidate\"","webpack://alquimiaspring/external commonjs \"crypto-js\"","webpack://alquimiaspring/external commonjs \"dotenv\"","webpack://alquimiaspring/external commonjs \"express\"","webpack://alquimiaspring/external commonjs \"jsonwebtoken\"","webpack://alquimiaspring/external node-commonjs \"crypto\"","webpack://alquimiaspring/external node-commonjs \"path\"","webpack://alquimiaspring/webpack/bootstrap","webpack://alquimiaspring/webpack/runtime/compat get default export","webpack://alquimiaspring/webpack/runtime/define property getters","webpack://alquimiaspring/webpack/runtime/hasOwnProperty shorthand","webpack://alquimiaspring/webpack/runtime/make namespace object","webpack://alquimiaspring/./app.js"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\"\r\nimport { responseError } from \"../../utils/errors/ResponseError\"\r\nimport { decrypter, generateToken } from \"../../utils/helpers/auth/AuthFunctions\"\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nexport const logInUser = async (req, res) => {\r\n    let getUser = null\r\n\r\n    const email = req.body.email\r\n    const password = req.body.contrasena\r\n\r\n    try {\r\n        getUser = await prisma.$transaction(async (table) => {\r\n            const passwordItems = await table.usuario.findUnique({\r\n                where: {\r\n                    email: email\r\n                },\r\n                select: {\r\n                    contrasena: true,\r\n                    salt_usuario: true\r\n                }\r\n            })\r\n\r\n            const decodedPassword = decrypter(passwordItems.contrasena, passwordItems.salt_usuario)\r\n\r\n            if (password !== decodedPassword) {\r\n                throw new Error(\"Cod-001\")\r\n            }\r\n\r\n            const userData = await prisma.usuario.findUnique({\r\n                where: {\r\n                    email: email\r\n                },\r\n                select: {\r\n                    email: true,\r\n                    primer_nombre: true,\r\n                    primer_apellido: true\r\n                }\r\n            })\r\n\r\n            return userData\r\n        })\r\n    } catch (error) {\r\n        return res.status(401).send(responseError(\"Error validando credenciales de usuario\", error))\r\n    }\r\n\r\n    const genToken = await generateToken(getUser)\r\n\r\n    return res.status(201).send({ token: genToken })\r\n}","import { PrismaClient } from \"@prisma/client\"\r\nimport { responseError } from \"../../utils/errors/ResponseError\"\r\nimport { encrypter, generateToken, saltStructure } from \"../../utils/helpers/auth/AuthFunctions\"\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nexport const registerNewUser = async (req, res) => {\r\n    let newUser = null\r\n\r\n    const email = req.body.email\r\n    const password = req.body.contrasena\r\n    const salt = saltStructure()\r\n\r\n    try {\r\n        newUser = await prisma.usuario.create({\r\n            data: {\r\n                ...req.body,\r\n                email: email,\r\n                contrasena: encrypter(password, salt),\r\n                salt_usuario: salt\r\n            },\r\n            select: {\r\n                email: true,\r\n                primer_nombre: true,\r\n                primer_apellido: true\r\n            }\r\n        })\r\n    } catch (error) {\r\n        return res.status(500).send(responseError(\"Error al registrar al usuario\", error))\r\n    }\r\n\r\n    const genToken = await generateToken(newUser)\r\n\r\n    return res.status(201).send({ token: genToken })\r\n}","import { PrismaClient } from \"@prisma/client\"\r\nimport { createConnectFormat } from \"../../utils/helpers/common/ConnectSchema\"\r\nimport { responseError } from \"../../utils/errors/ResponseError\"\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nexport const createNewCharacter = async (req, res) => {\r\n    let newCharacter = null\r\n\r\n    const movies = req.body.peliculas\r\n\r\n    try {\r\n        newCharacter = await prisma.personaje.create({\r\n            data: {\r\n                ...req.body,\r\n                peliculas: {\r\n                    create: createConnectFormat(movies, \"pelicula\", \"id\")\r\n                }\r\n            },\r\n            include: {\r\n                peliculas: {\r\n                    select: {\r\n                        pelicula: true\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    } catch (error) {\r\n        return res.status(400).send(responseError(\"Error creando personaje\",error))\r\n    }\r\n    return res.status(201).send(newCharacter)\r\n}","import { PrismaClient } from \"@prisma/client\"\r\nimport { responseError } from \"../../utils/errors/ResponseError\"\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nexport const deleteOneCharacter = async (res, req) => {\r\n    \r\n    const paramId = Number(req.params.id)\r\n\r\n    try {\r\n        await prisma.personaje.delete({\r\n            where: {\r\n                id: paramId\r\n            }\r\n        })\r\n    } catch (error) {\r\n        return res.status(500).send(responseError(`Error eliminando personaje con id=${paramId}`, error))\r\n    }\r\n    return res.status(200).send(`El personaje con id=${paramId} ha sido eliminado`)\r\n}","import { PrismaClient } from \"@prisma/client\"\r\nimport { responseError } from \"../../utils/errors/ResponseError\"\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nexport const getCharacterList = async (req, res) => {\r\n    let characters = null\r\n\r\n    const name = req.query.name\r\n    const age = Number(req.query.age) || undefined\r\n    const movies = req.query.movies?.split(\",\").map((idMovie) => { return Number(idMovie) })\r\n\r\n    console.log(movies)\r\n    try {\r\n        characters = await prisma.personaje.findMany({\r\n            where: {\r\n                nombre: {\r\n                    contains: name\r\n                },\r\n                edad: {\r\n                    equals: age\r\n                },\r\n                peliculas: {\r\n                    some: {\r\n                        pelicula: {\r\n                            id: {\r\n                                in: movies\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            include: {\r\n                peliculas: {\r\n                    select: {\r\n                        pelicula: true\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    } catch (error) {\r\n        return res.status(500).send(responseError(\"Error listando personajes\", error))\r\n    }\r\n    return res.status(200).send(characters)\r\n}\r\n\r\nexport const getOneCharacter = async (req, res) => {\r\n    let character = null\r\n\r\n    const paramId = Number(req.params.id)\r\n\r\n    try {\r\n        character = await prisma.personaje.findUnique({\r\n            where: {\r\n                id: paramId\r\n            },\r\n            include: {\r\n                peliculas: {\r\n                    select: {\r\n                        pelicula: true\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    } catch (error) {\r\n        return res.status(500).send(responseError(`Error obteniendo personaje con id=${paramId}`, error))\r\n    }\r\n    return res.status(200).send(character)\r\n}\r\n","import { PrismaClient } from \"@prisma/client\"\r\nimport { createConnectFormat, deleteRelationFormat } from \"../../utils/helpers/common/ConnectSchema\"\r\nimport { responseError } from \"../../utils/errors/ResponseError\"\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nexport const updateOneCharacter = async (req, res) => {\r\n    let characterUpdated = null\r\n\r\n    const paramId = Number(req.params.id)\r\n    const movies = req.body.peliculas\r\n\r\n    try {\r\n        characterUpdated = await prisma.personaje.update({\r\n            where: {\r\n                id: paramId\r\n            },\r\n            data: {\r\n                ...req.body,\r\n                peliculas: {\r\n                    create: createConnectFormat(movies?.conectar, \"pelicula\", \"id\"),\r\n                    deleteMany: deleteRelationFormat(movies?.desconectar, \"idPelicula\", { idPersonaje: paramId })\r\n                }\r\n            }\r\n        }\r\n        )\r\n    } catch (error) {\r\n        return res.status(500).send(responseError(`Error actualizando personaje con id=${paramId}`,error))\r\n           \r\n    }\r\n    return res.status(204).send()\r\n}\r\n","import { PrismaClient } from \"@prisma/client\"\r\nimport { responseError } from \"../../utils/errors/ResponseError\"\r\nimport { setDefaultImage } from \"../../utils/helpers/common/ImageSetter\"\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nexport const createNewGenre = async (req, res) => {\r\n    let newGenre = null\r\n\r\n    //setDefaultImage(req, \"imagen\")\r\n    try {\r\n        newGenre = await prisma.genero.create({\r\n            data: {\r\n                ...req.body\r\n            }\r\n        })\r\n    } catch (error) {\r\n        return res.status(400).send(responseError(\"Error creando genero\",error))\r\n    }\r\n    return res.status(201).send(newGenre)\r\n}","import { PrismaClient } from \"@prisma/client\"\r\nimport { responseError } from \"../../utils/errors/ResponseError\"\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nexport const deleteOneGenre = async (req, res) => {\r\n\r\n    const paramId = Number(req.params.id)\r\n\r\n    try {\r\n        await prisma.genero.delete({\r\n            where: {\r\n                id: paramId\r\n            }\r\n        })\r\n    } catch (error) {\r\n        return res.status(500).send(responseError(`Error eliminando genero con id=${paramId}`, error))\r\n    }\r\n    return res.status(200).send({Ok:`El genero con id=${paramId} ha sido eliminado`})\r\n}","import { PrismaClient } from \"@prisma/client\"\r\nimport { responseError } from \"../../utils/errors/ResponseError\"\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nexport const getGenreList = async (req, res) => {\r\n    let genres = null\r\n\r\n    try {\r\n        genres = await prisma.genero.findMany({\r\n            include: {\r\n                peliculas: {\r\n                    select: {\r\n                        pelicula: {\r\n                            select: {\r\n                                id: true,\r\n                                titulo: true\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    } catch (error) {\r\n        return res.status(500).send(responseError(\"Error listando generos\",error))\r\n    }\r\n    return res.status(200).send(genres)\r\n}\r\n\r\nexport const getOneGenre = async (req, res) => {\r\n    let genre = null\r\n\r\n    const paramId = Number(req.params.id)\r\n\r\n    try {\r\n        genre = await prisma.genero.findUnique({\r\n            where:{\r\n                id: paramId\r\n            },\r\n            include: {\r\n                peliculas: {\r\n                    select: {\r\n                        pelicula: {\r\n                            select: {\r\n                                id: true,\r\n                                titulo: true\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    } catch (error) {\r\n        return res.status(500).send(responseError(`Error obteniendo genero con id=${paramId}`,error))\r\n    }\r\n    return res.status(200).send(genre)\r\n}","import { PrismaClient } from \"@prisma/client\"\r\nimport { responseError } from \"../../utils/errors/ResponseError\"\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nexport const updateOneGenre = async (req, res) => {\r\n    let genreUpdated = null\r\n\r\n    const paramId = Number(req.params.id)\r\n\r\n    try {\r\n        genreUpdated = await prisma.genero.update({\r\n            where: {\r\n                id: paramId\r\n            },\r\n            data: {\r\n                ...req.body,\r\n            }\r\n        }\r\n        )\r\n    } catch (error) {\r\n        return res.status(500).send(responseError(`Error actualizando el genero con id=${paramId}`,error))\r\n    }\r\n    return res.status(204).send()\r\n}","import { PrismaClient } from \"@prisma/client\"\r\nimport { responseError } from \"../../utils/errors/ResponseError\"\r\nimport { createConnectFormat } from \"../../utils/helpers/common/ConnectSchema\"\r\nimport { dateDataConverter } from \"../../utils/helpers/common/DateConverter\"\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nexport const createNewMovie = async (req, res) => {\r\n    let newMovie = null\r\n\r\n    const date = req.body.fecha_creacion\r\n    const genres = req.body.generos\r\n    \r\n    try {\r\n        newMovie = await prisma.pelicula.create({\r\n            data: {\r\n                ...req.body,\r\n                fecha_creacion: dateDataConverter(date),\r\n                generos: {\r\n                    create: createConnectFormat(genres, \"genero\", \"id\")\r\n                }\r\n            },\r\n            include: {\r\n                generos: {\r\n                    select: {\r\n                        genero: true\r\n                    }\r\n                },\r\n                personajes: {\r\n                    select: {\r\n                        personaje: true\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n    } catch (error) {\r\n        return res.status(400).send(responseError(\"Error creando pelicula\",error))\r\n    }\r\n    return res.status(201).send(newMovie)\r\n}","import { PrismaClient } from \"@prisma/client\"\r\nimport { responseError } from \"../../utils/errors/ResponseError\"\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nexport const deleteOneMovie = async (req, res) => {\r\n\r\n    const paramId = Number(req.params.id)\r\n\r\n    try {\r\n        await prisma.pelicula.delete({\r\n            where: {\r\n                id: paramId\r\n            }\r\n        })\r\n    } catch (error) {\r\n        return res.status(500).send(responseError(`Error eliminando pelicula con id=${paramId}`, error))\r\n    }\r\n    return res.status(200).send({ Ok: `La pelicula con id=${paramId} ha sido eliminada` })\r\n}","import { PrismaClient } from \"@prisma/client\"\r\nimport { responseError } from \"../../utils/errors/ResponseError\"\r\nimport { orderByAscDesc } from \"../../utils/helpers/common/FilterConstants\"\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nexport const getMoviesList = async (req, res) => {\r\n    let movies = null\r\n\r\n    const title = req.query.title\r\n    const genre = req.query.genre?.split(\",\").map((idGenre) => { return Number(idGenre) })\r\n    const order = orderByAscDesc.includes(req.query.order) ? req.query.order : undefined\r\n    \r\n    try {\r\n        movies = await prisma.pelicula.findMany({\r\n            where: {\r\n                titulo: {\r\n                    contains: title\r\n                },\r\n                generos: {\r\n                    some: {\r\n                        genero: {\r\n                            id: {\r\n                                in: genre\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            orderBy: {\r\n                fecha_creacion: order\r\n            },\r\n            include: {\r\n                generos: {\r\n                    select: {\r\n                        genero: true\r\n                    }\r\n                },\r\n                personajes: {\r\n                    select: {\r\n                        personaje: true\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    } catch (error) {\r\n        return res.status(500).send(responseError(\"Error listando peliculas\", error))\r\n    }\r\n    return res.status(200).send(movies)\r\n}\r\n\r\nexport const getOneMovie = async (req, res) => {\r\n    let movies = null\r\n\r\n    const paramId = Number(req.params.id)\r\n\r\n    try {\r\n        movies = await prisma.pelicula.findUnique({\r\n            where: {\r\n                id: paramId\r\n            },\r\n            include: {\r\n                generos: {\r\n                    select: {\r\n                        genero: true\r\n                    }\r\n                },\r\n                personajes: {\r\n                    select: {\r\n                        personaje: true\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    } catch (error) {\r\n        return res.status(500).send(responseError(`Error obteniendo pelicula con id=${paramId}`, error))\r\n    }\r\n    return res.status(200).send(movies)\r\n}","import { PrismaClient } from \"@prisma/client\"\r\nimport { createConnectFormat, deleteRelationFormat } from \"../../utils/helpers/common/ConnectSchema\"\r\nimport { responseError } from \"../../utils/errors/ResponseError\"\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nexport const updateOneMovie = async (req, res) => {\r\n    let movieUpdated = null\r\n\r\n    const paramId = Number(req.params.id)\r\n\r\n    const date = req.body.fecha_creacion\r\n    const characters = req.body.personajes\r\n    const genres = req.body.generos\r\n \r\n    try {\r\n        movieUpdated = await prisma.pelicula.update({\r\n            where: {\r\n                id: paramId\r\n            },\r\n            data: {\r\n                ...req.body,\r\n                fecha_creacion: dateDataConverter(date),\r\n                generos:{\r\n                    create: createConnectFormat(genres?.conectar, \"genero\", \"id\"),\r\n                    deleteMany: deleteRelationFormat(genres?.desconectar, \"idGenero\", { idPelicula: paramId })\r\n                },\r\n                personajes:{\r\n                    create: createConnectFormat(characters?.conectar, \"personaje\", \"id\"),\r\n                    deleteMany: deleteRelationFormat(characters?.desconectar, \"idPersonaje\", { idPelicula: paramId })\r\n                }\r\n            }\r\n        }\r\n        )\r\n    } catch (error) {\r\n        return res.status(500).send(responseError(`Error actualizando la pelicula con id=${paramId}`,error))\r\n    }\r\n    return res.status(204).send()\r\n}\r\n","import { Personaje } from './personaje'\nimport { Pelicula } from './pelicula'\n\nexport class PersonajeEnPelicula {\n\tpersonaje: Personaje\n\n\tidPersonaje: number\n\n\tpelicula: Pelicula\n\n\tidPelicula: number\n}\n","import express from \"express\";\r\nimport { logInUser } from \"../controller/auth/LoginUser\";\r\nimport { registerNewUser } from \"../controller/auth/RegisterUser\";\r\nimport { middleAuthValidator } from \"../utils/validations/auth/MiddleAuthValidator\";\r\n\r\nconst authRouter = express.Router()\r\n\r\nauthRouter.post(\"/register\", middleAuthValidator, registerNewUser)\r\n\r\nauthRouter.post(\"/login\", middleAuthValidator, logInUser)\r\n\r\nexport default authRouter","import express from \"express\";\r\nimport { createNewCharacter } from \"../controller/characters/CreateCharacters\";\r\nimport { deleteOneCharacter } from \"../controller/characters/DeleteCharacters\";\r\nimport { getCharacterList, getOneCharacter } from \"../controller/characters/GetCharacters\";\r\nimport { updateOneCharacter } from \"../controller/characters/UpdateCharacters\";\r\nimport { middleCharactersValidator } from \"../utils/validations/characters/MiddleCharactersValidator\";\r\n\r\nconst characterRouter = express.Router()\r\n\r\ncharacterRouter.get(\"/\", getCharacterList)\r\n\r\ncharacterRouter.get(\"/:id\", getOneCharacter)\r\n\r\ncharacterRouter.post(\"/\", middleCharactersValidator, createNewCharacter)\r\n\r\ncharacterRouter.put(\"/:id\", middleCharactersValidator, updateOneCharacter)\r\n\r\ncharacterRouter.delete(\"/:id\", deleteOneCharacter)\r\n\r\nexport default characterRouter","import express from \"express\";\r\nimport { createNewGenre } from \"../controller/genres/CreateGenres\";\r\nimport { deleteOneGenre } from \"../controller/genres/DeleteGenres\";\r\nimport { getGenreList, getOneGenre } from \"../controller/genres/GetGenres\";\r\nimport { updateOneGenre } from \"../controller/genres/UpdateGenres\";\r\nimport { middleGenresValidator } from \"../utils/validations/genres/MiddleGenresValidator\";\r\n\r\nconst genreRouter = express.Router()\r\n\r\ngenreRouter.get(\"/\", getGenreList)\r\n\r\ngenreRouter.get(\"/:id\", getOneGenre)\r\n\r\ngenreRouter.post(\"/\", middleGenresValidator, createNewGenre)\r\n\r\ngenreRouter.put(\"/:id\", middleGenresValidator, updateOneGenre)\r\n\r\ngenreRouter.delete(\"/:id\", deleteOneGenre)\r\n\r\nexport default genreRouter","import express from \"express\";\r\nimport { createNewMovie } from \"../controller/movies/CreateMovies\";\r\nimport { deleteOneMovie } from \"../controller/movies/DeleteMovies\";\r\nimport { getMoviesList, getOneMovie } from \"../controller/movies/GetMovies\";\r\nimport { updateOneMovie } from \"../controller/movies/UpdateMovies\";\r\nimport { middleMoviesValidator } from \"../utils/validations/movies/MiddleMoviesValidator\";\r\n\r\nconst moviesRouter = express.Router()\r\n\r\nmoviesRouter.get(\"/\", getMoviesList)\r\n\r\nmoviesRouter.get(\"/:id\", getOneMovie)\r\n\r\nmoviesRouter.post(\"/\", middleMoviesValidator, createNewMovie)\r\n\r\nmoviesRouter.put(\"/:id\", middleMoviesValidator, updateOneMovie)\r\n\r\nmoviesRouter.delete(\"/:id\", deleteOneMovie)\r\n\r\nexport default moviesRouter","import express from \"express\";\r\nimport authRouter from \"./AuthRoutes\";\r\nimport characterRouter from \"./CharactersRoutes\";\r\nimport genreRouter from \"./GenresRoutes\";\r\nimport moviesRouter from \"./MoviesRoutes\";\r\n\r\nconst router = express.Router()\r\n\r\nrouter.use(\"/auth\", authRouter)\r\nrouter.use(\"/characters\", characterRouter)\r\nrouter.use(\"/movies\", moviesRouter)\r\nrouter.use(\"/genres\", genreRouter)\r\n\r\nexport default router","import { Prisma } from \"@prisma/client\"\r\nimport { removeLineBreaks } from \"../helpers/common/StringFormater\"\r\nimport { typeError } from \"./TypeErrors\"\r\n\r\nexport const prismaErrorHandler = (error) => {\r\n    const textError = JSON.stringify(error.message)\r\n\r\n    if (error instanceof Prisma.PrismaClientValidationError) {\r\n        const errorTotalLength = textError.length\r\n        const lastBracketFormat = textError.lastIndexOf(\"}\")\r\n\r\n        if (textError.includes(\"Got invalid value\")) {\r\n            error.message = textError.match(/Argument [(a-z)(A-Z)_]+: Got invalid value/g)\r\n        } else {\r\n            error.message = textError\r\n                .substring(lastBracketFormat + 5, errorTotalLength - 5)\r\n                .split(/\\\\n\\\\n|\\\\n/)\r\n        }\r\n\r\n        error.typeError = typeError.PRISMA_VALIDATION\r\n\r\n    } else if (error instanceof Prisma.PrismaClientInitializationError) {\r\n\r\n        error.message = removeLineBreaks(error.message)\r\n        error.typeError = typeError.PRISMA_CONNECTION\r\n\r\n    } else if (error instanceof Prisma.PrismaClientKnownRequestError) {\r\n\r\n        error.message = removeLineBreaks(error.message)\r\n        error.typeError = typeError.PRISMA_DATABASE\r\n\r\n    }\r\n}","import { codeError } from \"./codeErrors\"\r\nimport { prismaErrorHandler } from \"./PrismaErrorHandler\"\r\nimport { javascriptRuntimeErrorHandler } from \"./RunTimeErrorHandler\"\r\nimport { typeError } from \"./TypeErrors\"\r\n\r\n\r\nexport const responseError = (message, error) => {\r\n    \r\n    prismaErrorHandler(error)\r\n    javascriptRuntimeErrorHandler(error)\r\n    codeError(error)\r\n    \r\n    if (!error.typeError) {\r\n        error.typeError = typeError.UNIDENTIFIED\r\n    }\r\n\r\n    return {\r\n        error:\r\n            { messageError: message, typeError: error.typeError, systemError: error?.message }\r\n    }\r\n}","import { typeError } from \"./TypeErrors\"\r\n\r\nexport const javascriptRuntimeErrorHandler = (error) => {\r\n\r\n    if (error instanceof ReferenceError) {\r\n        error.typeError = typeError.JAVASCRIPT_ERROR\r\n    }\r\n}","export const typeError ={\r\n    UNIDENTIFIED:\"UNIDENTIFIED\",\r\n    AUTHENTICATION_ERROR: \"AUTHENTICATION ERROR\",\r\n    DATABASE:\"DATABASE\",\r\n    PRISMA_CONNECTION:\"PRISMA CONNECTION ERROR\",\r\n    PRISMA_VALIDATION:\"PRISMA INVALID FIELDS\",\r\n    PRISMA_DATABASE:\"PRISMA DATABASE INVALID ACTION\",\r\n    JAVASCRIPT_ERROR:\"JAVASCRIPT RUNTIME ERROR\",\r\n    EMPTY_BODY: \"EMPTY BODY\",\r\n    BAD_INPUT_DATA: \"BAD INPUT DATA\"\r\n}","import { typeError } from \"./TypeErrors\";\r\n\r\nexport const codeError = (error) => {\r\n\r\n    switch (error.message) {\r\n        case \"Cod-001\":\r\n            error.typeError = typeError.AUTHENTICATION_ERROR\r\n            error.message = \"Cod-001 Password validation process has failed\"\r\n            break;\r\n\r\n        default:\r\n            break;\r\n    }\r\n}","import { AES, enc } from \"crypto-js\"\r\nimport { randomBytes } from \"crypto\"\r\nimport jwt from \"jsonwebtoken\"\r\n\r\nexport const encrypter = (text, key) => {\r\n    return AES.encrypt(text, key).toString()\r\n}\r\n\r\nexport const decrypter = (text, key) => {\r\n    return AES.decrypt(text, key).toString(enc.Utf8)\r\n}\r\n\r\nexport const saltStructure = () => {\r\n    return randomBytes(20).toString(\"hex\")\r\n}\r\n\r\nexport const generateToken = async (userData) => {\r\n    const completeToken = \"Bearer \" + jwt.sign(userData, process.env.TOKEN_KEY, { algorithm: \"HS256\", expiresIn: '1h' })\r\n    return completeToken\r\n}\r\n\r\nexport const validateToken = async (token) => {\r\n    const realToken = token.split(\" \")[1]\r\n\r\n    try {\r\n        return jwt.verify(realToken, process.env.TOKEN_KEY)\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}","import { PersonajeEnPelicula } from \"../../../models/personaje_en_pelicula\"\r\n\r\nexport const createConnectFormat = (keyList, relationField, keyName) => {\r\n    if (keyList === undefined || null) return undefined\r\n\r\n    if (!Array.isArray(keyList))\r\n        throw new Error(`La propieadad de [${relationField}] debe ser un arreglo de uno o varios enteros`)\r\n\r\n    let format = keyList.map((element) => {\r\n        return {\r\n            [relationField]: {\r\n                connect: { [keyName]: element }\r\n            }\r\n        }\r\n    })\r\n\r\n    return format\r\n}\r\n\r\n\r\nexport const deleteRelationFormat = (keyIdList, relationField, ownIdObject) => {\r\n\r\n    if (keyIdList === undefined || null) return undefined\r\n\r\n    if (!Array.isArray(keyIdList))\r\n        throw new Error(`La propieadad de [${relationField}] debe ser un arreglo de uno o varios enteros`)\r\n\r\n    let format = keyIdList.map((element) => {\r\n        return {\r\n            [relationField]: element,\r\n            ...ownIdObject\r\n        }\r\n    })\r\n\r\n    return format\r\n}\r\n","export const stringToNumberDateValues = (dateValue) => {\r\n    const date = dateValue?.split(/-|\\//)\r\n    const year = date && Number(date[0])\r\n    const month = date && Number(date[1]) - 1\r\n    const day = date && Number(date[2])\r\n\r\n    return { year: year, month: month, day: day }\r\n}\r\n\r\nexport const dateDataConverter = (dateValue) => {\r\n    const { year, month, day } = stringToNumberDateValues(dateValue)\r\n    return year ? new Date(year, month, day) : undefined\r\n}\r\n","export const orderByAscDesc = [\"asc\", \"desc\"]","export const setDefaultImage = (req, field) => {\r\n    if (req.body[field] === undefined || null) {\r\n        req.body[field] = \"https://whetstonefire.org/wp-content/uploads/2020/06/image-not-available.jpg\"\r\n    }\r\n}\r\n","export const removeLineBreaks = (text) => {\r\n    return text.replace(/[\\r\\n]/gm, ' ').trim().replace(/[\\r\\s]+/g,\" \");\r\n}","export const validateEmail = (req, res) => {\r\n\r\n    const email = req.body.email\r\n\r\n    const result = String(email)\r\n        .toLowerCase()\r\n        .match(\r\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n        )\r\n\r\n    if (!result) {\r\n        res.status(400).send(\r\n            {\r\n                error:\r\n                    { messageError: \"El email no contiene un formato valido\", typeError: typeError.BAD_INPUT_DATA, systemError: null }\r\n            }\r\n        )\r\n        return false\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nexport const checkPasswordLength = (req, res) => {\r\n    const password = req.body.contrasena\r\n\r\n    if (password.length < 4 || password.length > 30) {\r\n        res.status(400).send(\r\n            {\r\n                error:\r\n                    { messageError: \"La contraseña debe contener entre 4 y 30 caracteres\", typeError: typeError.BAD_INPUT_DATA, systemError: null }\r\n            }\r\n        )\r\n        return false\r\n    }\r\n    \r\n    return true\r\n}","import { isNotEmptyBody } from \"../common/ReqBodyEmpty\"\r\nimport { validations } from \"../common/Validations\"\r\nimport { checkPasswordLength, validateEmail } from \"./AuthFieldChecker\"\r\n\r\nexport const middleAuthValidator = (req, res, next) => {\r\n    \r\n    if (validations(\r\n        isNotEmptyBody.bind(null, req, res),\r\n        validateEmail.bind(null, req, res),\r\n        checkPasswordLength.bind(null, req, res)\r\n    )) {\r\n        next()\r\n    }\r\n}","import { isNotEmptyBody } from \"../common/ReqBodyEmpty\"\r\nimport { validations } from \"../common/Validations\"\r\n\r\nexport const middleCharactersValidator = (req, res, next) => {\r\n    if (validations(\r\n        isNotEmptyBody.bind(null, req, res)\r\n    )) {\r\n        next()\r\n    }\r\n}","import { typeError } from \"../../errors/TypeErrors\"\r\nimport { stringToNumberDateValues } from \"../../helpers/common/DateConverter\"\r\n\r\nexport const checkDateLimits = (req, res) => {\r\n    let result = false\r\n\r\n    const { year, month, day } = stringToNumberDateValues(req.body.fecha_creacion)\r\n\r\n    if (month > 11 || month < 0) {\r\n        res.status(400).send(\r\n            {\r\n                error:\r\n                    { messageError: \"Ha ocurrido en error al introducir el mes\", typeError: typeError.BAD_INPUT_DATA, systemError: null }\r\n            }\r\n        )\r\n        return result\r\n    }\r\n\r\n    if (day > new Date(year, month, 0).getDate()) {\r\n        res.status(400).send(\r\n            {\r\n                error:\r\n                    { messageError: \"Ha ocurrido en error al introducir el dia\", typeError: typeError.BAD_INPUT_DATA, systemError: null }\r\n            }\r\n        )\r\n        return result\r\n    }\r\n\r\n    result = true\r\n    return result\r\n}\r\n","import { typeError } from \"../../errors/TypeErrors\"\r\n\r\nexport const isNotEmptyBody = (req, res) => {\r\n    if (Object.keys(req.body).length === 0) {\r\n        res.status(400).send(\r\n            {\r\n                error:\r\n                    { messageError: \"Cuerpo de peticion vacio\", typeError: typeError.BAD_INPUT_DATA, systemError: null }\r\n            }\r\n        )\r\n        return false\r\n    }\r\n    return true\r\n}","export const validations = (...listFunction) => {\r\n\r\n    let result = true\r\n\r\n    for (let i = 0; i < listFunction.length; i++) {\r\n        if (!listFunction[i]()){\r\n            result = false\r\n            break\r\n        }\r\n    }\r\n\r\n    return result\r\n}","import { isNotEmptyBody } from \"../common/ReqBodyEmpty\"\r\nimport { validations } from \"../common/Validations\"\r\n\r\nexport const middleGenresValidator = (req, res, next) => {\r\n    if (validations(\r\n        isNotEmptyBody.bind(null, req, res)\r\n    )) {\r\n        next()\r\n    }\r\n}","import { checkDateLimits } from \"../common/Dates\"\r\nimport { isNotEmptyBody } from \"../common/ReqBodyEmpty\"\r\nimport { validations } from \"../common/Validations\"\r\nimport { checkQualification } from \"./MoviesFieldChecker\"\r\n\r\nexport const middleMoviesValidator = (req, res, next) => {\r\n    if (validations(\r\n        isNotEmptyBody.bind(null, req, res),\r\n        checkQualification.bind(null, req, res),\r\n        checkDateLimits.bind(null, req, res)\r\n    )) {\r\n        next()\r\n    }\r\n}","import { typeError } from \"../../errors/TypeErrors\"\r\n\r\nexport const checkQualification = (req, res) => {\r\n\r\n    if (req.body.calificacion < 1 || req.body.calificacion > 5) {\r\n        res.status(400).send(\r\n            {\r\n                error:\r\n                    { messageError: \"Calificacion de pelicula por fuera de limites (1-5)\", typeError: typeError.BAD_INPUT_DATA, systemError: null }\r\n            }\r\n        )\r\n        return false\r\n    }\r\n    return true\r\n}","module.exports = require(\"@prisma/client\");","module.exports = require(\"consolidate\");","module.exports = require(\"crypto-js\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"crypto\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import express from \"express\";\r\nimport router from \"./src/routes/Router\";\r\nimport dotenv from \"dotenv\";\r\nimport path from \"path\";\r\nimport engine from \"consolidate\";\r\n\r\ndotenv.config()\r\n\r\nconst port = process.env.PORT || 3000\r\nconst app = express()\r\n\r\napp.set('views', path.join(__dirname + '/views'));\r\napp.engine('html', engine.mustache);\r\napp.set('view engine', 'html');\r\n\r\napp.use(express.json())\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.render(\"index.html\")\r\n})\r\n\r\napp.use(router)\r\n\r\napp.listen(port, () => {\r\n    console.log(`Servidor Funcionando en puerto: ${port}`)\r\n})\r\n"],"names":[],"sourceRoot":""}